name: Release Creation

on:
  push:
    tags:
      - '*.*.*' # Run when tag matches semantic version like 1.0.0

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 # Need full history for changelog

    # Extract version from tag
    - name: Set version
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    # Generate release notes with commit links
    - name: Generate Release Notes
      id: generate_notes
      run: |
        # Get previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # If no previous tag, get all commits
        if [ -z "$PREVIOUS_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- [%s](https://github.com/${{ github.repository }}/commit/%H)" --reverse)
        else
          COMMITS=$(git log --pretty=format:"- [%s](https://github.com/${{ github.repository }}/commit/%H)" ${PREVIOUS_TAG}..HEAD --reverse)
        fi
        
        # Format release notes
        FORMATTED_NOTES="## Changes\n${COMMITS}"
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        echo -e "${FORMATTED_NOTES}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # Substitute the Manifest and Download URLs in the module.json
    - name: Substitute Manifest and Download Links For Versioned Ones
      id: sub_manifest_link_version
      uses: microsoft/variable-substitution@v1
      with:
        files: 'module.json'
      env:
        version: ${{steps.get_version.outputs.version}}
        url: https://github.com/${{github.repository}}
        manifest: https://github.com/${{github.repository}}/releases/latest/download/module.json
        download: https://github.com/${{github.repository}}/releases/download/${{github.ref_name}}/module.zip

    # Create a zip file with all files required by the module to add to the release
    - run: zip -r ./module.zip module.json LICENSE styles/ scripts/ templates/ languages/

    # Create a release for this specific version
    - name: Create Release
      id: create_version_release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        name: Release ${{ steps.get_version.outputs.version }}
        draft: false
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: './module.json, ./module.zip'
        tag: ${{ github.ref_name }}
        body: ${{ env.RELEASE_NOTES }}

    # Publish to Foundry VTT
    - name: Publish to Foundry VTT
      run: |
        curl -X POST \
          https://api.foundryvtt.com/_api/packages/release_version \
          -H "Authorization: Bearer ${{ secrets.FOUNDRY_API_KEY }}" \
          -F "id=${{ secrets.PACKAGE_ID }}" \
          -F "version=${{steps.get_version.outputs.version}}" \
          -F "manifest=@module.json" \
          -F "zip=@module.zip"
